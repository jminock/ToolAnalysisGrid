### Created by Dr. Benjamin Richards (b.richards@qmul.ac.uk)

### Download base image from cern repo on docker hub
FROM fermilab/fnal-wn-sl7

### Run the following commands as super user (root):
USER root

#######################
### GCC ENVIRONMENT ###
#######################
RUN yum install -y \
    python3-devel \
    cmake \
    binutils \
    libXpm-devel \
    libXft-devel \
    libjpeg-devel \
    graphviz-devel \
    git \
    bzip2-devel \
    cvs \
    automake \
    svn  \ 
    libtool \
    gsl-devel \
    emacs \
    osg-ca-certs \
    fftw3 \
    fftw3-devel \
    unzip \
    gmp-devel \
    mpfr-devel \
    libmpc-devel \
    libxkbcommon-x11 \
    xcb-util-wm \
    xcb-util-image \
    xcb-util-keysyms \
    xcb-util-renderutil \
    && yum clean all \
    && rm -rf /var/cache/yum

#gcc 8.5.0
RUN wget http://mirrors.concertpass.com/gcc/releases/gcc-8.5.0/gcc-8.5.0.tar.gz \
    && tar zxf gcc-8.5.0.tar.gz \
    && rm gcc-8.5.0.tar.gz \
    && mkdir gcc-85-build \
    && mkdir gcc-85-install \
    && cd gcc-8.5.0/ \
    && ./contrib/download_prerequisites \
    && cd ../gcc-85-build/ \
    && /gcc-8.5.0/configure --prefix=/gcc-85-install/ --disable-multilib \
    && make \
    && make install \
    && cd / \
    && rm -rf gcc-8.5.0/ gcc-85-build/

#cmake 3.20.2
RUN wget https://cmake.org/files/v3.20/cmake-3.20.2.tar.gz \
    && tar -xf cmake-3.20.2.tar.gz \
    && mkdir cmake-3.20.2-build \
    && cd cmake-3.20.2-build/ \
    && export LD_LIBRARY_PATH=/gcc-85-install/lib64/:/gcc-85-install/lib/:$LD_LIBRARY_PATH \
    && export LD_RUN_PATH=/gcc-85-install/lib64/:/gcc-85-install/lib/:$LD_RUN_PATH \
    && export PATH=/gcc-85-install/bin/:$PATH \
    && /cmake-3.20.2/bootstrap \
    && make \
    && make install \
    && rm -rf cmake-3.20.2.tar.gz cmake-3.20.2/

#python 3.8.13
RUN wget https://www.python.org/ftp/python/3.8.10/Python-3.8.10.tar.xz \
    && tar -xf Python-3.8.10.tar.xz \
    && cd Python-3.8.10/ \
    && export LD_LIBRARY_PATH=/gcc-85-install/lib64/:/gcc-85-install/lib/:$LD_LIBRARY_PATH \
    && export LD_RUN_PATH=/gcc-85-install/lib64/:/gcc-85-install/lib/:$LD_RUN_PATH \
    && export PATH=/cmake-3.20.2-build/bin/:/gcc-85-install/bin/:$PATH \
    && ./configure \
    && make \
    && make install

Run git clone https://github.com/jminock/ToolAnalysisGrid.git; chmod -R 777 /ToolAnalysis ; cd ToolAnalysis ; ./GetToolDAQ.sh --ToolDAQ_ZMQ;
Run cd ToolAnalysis ; ./GetToolDAQ.sh --Boost;
Run cd ToolAnalysis ; ./GetToolDAQ.sh --Pythia;
Run cd ToolAnalysis ; ./GetToolDAQ.sh --Root6;
Run cd ToolAnalysis ; ./GetToolDAQ.sh --Python3; chmod -R 777 /ToolAnalysis/UserTools;
Run cd ToolAnalysis ; ./GetToolDAQ.sh --Clhep;
Run cd ToolAnalysis ; ./GetToolDAQ.sh --Lhapdf;
Run cd ToolAnalysis ; ./GetToolDAQ.sh --Genie;
Run cd ToolAnalysis ; ./GetToolDAQ.sh --RATEventlib; chmod -R 777 /ToolAnalysis/ToolDAQ/RATEventLib;
Run cd ToolAnalysis ; ./GetToolDAQ.sh --WCSim; chmod -R 777 /ToolAnalysis/ToolDAQ/WCSimLib;
Run cd ToolAnalysis ; ./GetToolDAQ.sh --MrdTrackLib; chmod -R 777 /ToolAnalysis/ToolDAQ/MrdTrackLib;
Run cd ToolAnalysis ; ./GetToolDAQ.sh --PlotWaveforms; chmod -R 777 /ToolAnalysis/UserTools/PlotWaveforms;
Run cd ToolAnalysis ; ./GetToolDAQ.sh --Final;
Run mkdir /pnfs /annie /cvmfs; chmod 777 /pnfs /annie /cvmfs;

### Open terminal
CMD ["/bin/bash"]

